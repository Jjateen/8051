;Write a program to create Fibonacci series til fib(10)
MOV R1,#0AH
MOV R2,#00H
MOV A,#00H
MOV DPTR,#2000H
MOVX @DPTR, A
INC A
INC DPTR
MOVX @DPTR, A
DEC R1
DEC R1
INC DPTR
MOV A,#00H
MOV B,#01H
LOOP: ADD A,B // A = A + B
	  MOV R2,A //  C = A + B
	  MOVX @DPTR, A
	  INC DPTR
	  MOV A,B// A = B
	  MOV B,R2// B = C
	  DJNZ R1,LOOP
END
;use x:2000h to view o/p

// Experiment 6-a
// Sort a given array in Ascendng order

ORG 0000H                  // Starting address
MOV R4, #04H               // Load the number of bits in R4
LOOP2: MOV R3, #04H       // Load the number of bits in R3
MOV R0, #20H               // Load R0=20H
CLR C                      // CY=0
LOOP1: MOV A, @R0          // Move content of ML [20] in A
MOV R1, A                  // Move content of A in R1
INC R0                     // Increment R0
MOV A, @R0                 // Move content of ML [20] in A
SUBB A, R1                 // Substract R1 from register A
JNC SKIP                   // Check for carry
MOV A, @R0                 // Move content of ML [20] in A
DEC R0                     // Decrement R0
MOV @R0, A                 // Move content of Register A in ML [20]
MOV A, R1                  // Move contents of R1 in A
INC R0                     // Increment R0
MOV @R0, A                 // Move content of register A in ML [20]
SKIP: DJNZ R3, LOOP1       // Repeat until counter=0
DJNZ R4, LOOP2             // Repeat until counter=0
END                        // Stop

Write an program for 8051 to take user input of size and elements of array and then sort them in ascending and descending order.
// Experiment 6-b
// Sort a given array in Descending order

ORG 0000H             // Starting address
MOV R4, #04H          // Load the number of bits in R4
LOOP2: MOV R3, #04H   // Load the number of bits in R3
MOV R0, #20H          // LOad R0=20H
CLR C                 // CY=0
LOOP1: MOV A, @R0     // Move content of ML [20] in A
MOV R1, A             // Move content of A in R1
INC R0                // Increment R0
MOV A, @R0            // Move content of ML [20] in A
SUBB A, R1            // Substract R1 from register A
JC SKIP               // Check for carry
MOV A, @R0            // Move content of ML [20H] in A
DEC R0                // Decrement R0
MOV @R0, A            // Move content of register A in ML [20]
MOV A, R1             // Move content of R1 in A
INC R0                // Increment R0
MOV @R0, A            // Move content of register A in ML [20]
SKIP: DJNZ R3, LOOP1  // Repeat until counter=0
DJNZ R4, LOOP2        // Repeat until counter=0
END                   // Stop

;put value in d:20h
