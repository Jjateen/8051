ORG 0000H          ; Start at address 0000H

; Assuming a, b, c, d are already stored in internal RAM at locations 20H to 23H
; 20H: 'a', 21H: 'b', 22H: 'c', 23H: 'd'

; Load 'a' from 20H into R0
MOV A, 20H          ; Load element 'a' into A
MOV R0, A           ; Store 'a' in R0

; Load 'b' from 21H into R1
MOV A, 21H          ; Load element 'b' into A
MOV R1, A           ; Store 'b' in R1

; Load 'c' from 22H into R2
MOV A, 22H          ; Load element 'c' into A
MOV R2, A           ; Store 'c' in R2

; Load 'd' from 23H into R3
MOV A, 23H          ; Load element 'd' into A
MOV R3, A           ; Store 'd' in R3

; Calculate a * d
MOV A, R0           ; Load 'a' into A
MOV B, R3           ; Load 'd' into B
MUL AB              ; A = a * d (result is in A:B, A holds low byte, B holds high byte)
MOV 24H, A          ; Store low byte of a*d in internal RAM at 0x24
MOV 25H, B          ; Store high byte of a*d in internal RAM at 0x25

; Calculate b * c
MOV A, R1           ; Load 'b' into A
MOV B, R2           ; Load 'c' into B
MUL AB              ; A = b * c (result is in A:B, A holds low byte, B holds high byte)
MOV 26H, A          ; Store low byte of b*c in internal RAM at 0x26
MOV 27H, B          ; Store high byte of b*c in internal RAM at 0x27

; Calculate (a * d) - (b * c)
MOV A, 24H          ; Load low byte of a*d from 0x24 into A
CLR C               ; Clear carry flag before subtraction
SUBB A, 26H         ; A = a*d - b*c (low byte)
MOV 28H, A          ; Store result low byte in internal RAM at 0x28

MOV A, 25H          ; Load high byte of a*d from 0x25 into A
SUBB A, 27H         ; A = a*d - b*c (high byte)
MOV 29H, A          ; Store result high byte in internal RAM at 0x29


END                 ; End of the program
